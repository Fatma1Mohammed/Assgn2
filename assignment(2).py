# -*- coding: utf-8 -*-
"""Assignment(2).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fU0uBH_GFuNfc1glU-cBsVUWZZcBHH6d
"""

from datetime import date

class Ebook:
  """Class to represent an e-book in the E-book Management system."""

  # Constructor to initialize the e-book object with attributes: title, author, publication_date, genre, price, is_available to check if the book is available.
  def __init__(self, title="", author="", publication_date="", genre="", price=0.0, is_available=True):
    self._title = title
    self._author = author
    self._publication_date = publication_date
    self._genre = genre
    self._price = price
    self._is_available = is_available

  # Getters and Setters for each attribute
  def get_title(self):
    return self._title

  def set_title(self, title):
    self._title = title

  def get_author(self):
    return self._author

  def set_author(self, author):
    self._author = author

  def get_publication_date(self):
    return self._publication_date

  def set_publication_date(self, publication_date):
    self._publication_date = publication_date

  def get_genre(self):
    return self._genre

  def set_genre(self, genre):
    self._genre = genre

  def get_price(self):
    return self._price

  def set_price(self, price):
    self._price = price

  def get_availability(self):
    return self._is_available

  def set_availability(self, is_available):
    self._is_available = is_available

  def __str__(self):
    return f"Ebook: {self._title} by {self._author}, Price: {self._price} AED, Available: {self._is_available}"

class Catalog:
  """Class to represent a catalog that holds a collection of e-books. Aggregates multiple Ebook objects."""
  def __init__(self):
    self._books = []

  def add_book(self, book):
    if isinstance(book, Ebook):
      self._books.append(book)
      print(f"Ebook '{book.get_title()}' added to the catalog.")

  def modify_book(self, old_book, new_book):
    if old_book in self._books:
        index = self._books.index(old_book)
        self._books[index] = new_book
        print(f"Ebook '{old_book.get_title()}' modified to '{new_book.get_title()}' in the catalog.")
    else:
        print(f"Ebook '{old_book.get_title()}' doesn't exist in the catalog.")

  def remove_book(self, book):
    if book in self._books:
      self._books.remove(book)
      print(f"Ebook '{book.get_title()}' removed from the catalog.")
    else:
      print(f"Ebook '{book.get_title()}' doesn't exist in the catalog.")

  def list_books(self):
    return [str(book) for book in self._books]


class CustomerAccount:
  """Class to represent a customer account with basic information and loyalty status."""
  def __init__(self, name="", email="", phone_number="", address="", is_loyal_member=False):
    self._name = name
    self._email = email
    self._phone_number = phone_number
    self._address = address
    self._is_loyal_member = is_loyal_member

  # Define getters and setters for each attribute
  def get_name(self):
    return self._name

  def set_name(self, name):
    self._name = name

  def get_email(self):
    return self._email

  def set_email(self, email):
    self._email = email

  def get_phone_number(self):
    return self._phone_number

  def set_phone_number(self, phone_number):
    self._phone_number = phone_number

  def get_address(self):
    return self._address

  def set_address(self, address):
    self._address = address

  def get_loyalty_status(self):
    return self._is_loyal_member

  def set_loyalty_status(self, is_loyal_member):
    self._is_loyal_member = is_loyal_member

  # Define a function to check if the customer is a loyal memeber
  def __str__(self):
    return f"Customer: {self._name}, Email: {self._email}, Loyalty Member: {self._is_loyal_member}"

class ShoppingCart:
  """Class to represent a shopping cart to manage e-books and their quantities."""

  # Constructor to initialize the shopping cart attributes.
  def __init__(self):
    self._items = {}  # Dictionary to store e-book and quantity

  def add_ebook(self, ebook, quantity=1):
    if ebook.get_availability():
      self._items[ebook] = self._items.get(ebook, 0) + quantity
    else:
      raise ValueError(f"'{ebook.get_title()}' is unavailable right now.")

  # Define a function that removes the ebook from the cart.
  def remove_ebook(self, ebook):
    self._items.pop(ebook, None)

  # Define a function that updates the quantity of the ebook in the cart, or removes it if quantity is 0.
  def update_quantity(self, ebook, quantity):
    if quantity <= 0:
      self.remove_ebook(ebook)
    else:
        self._items[ebook] = quantity

  # Define a function that returns a list of items in the cart with their quantities and prices.
  def view_cart(self):
    return [
        {"Book Title": ebook.get_title(), "quantity": quantity, "price": ebook.get_price()}
        for ebook, quantity in self._items.items()
    ]

  # Define a function that calculates the total price of all items in the cart.
  def get_total_price(self):
    return sum(ebook.get_price() * quantity for ebook, quantity in self._items.items())

class Order:
  """Class to represent a an order. Contains association with CustomerAccount and aggregated Ebook objects."""
  def __init__(self, customer, books, order_date=date.today(), status=""):
    self._customer = customer
    self._books = books
    self._order_date = order_date
    self._status = status

  def get_ebook_quantity(self):
    return self._ebook_quantity

  def set_ebook_quantity(self, ebook_quantity):
    self._ebook_quantity = ebook_quantity

  def get_order_date(self):
    return self._order_date

  def set_order_date(self, order_date):
    self._order_date = order_date

  def get_status(self):
    return self._status

  def set_status(self, status):
    self._status = status

  def get_order_details(self):
    return f"Order Date: {self._order_date}, Status: {self._status}, Customer: {self._customer}, Books: {[book.get_title() for book in self._books]}"

  def update_status(self, status):
    self._status = status

class Payment:
  """Class to represent a payment method."""
  def __init__(self, payment_method=""):
    self._payment_method = payment_method

  def get_payment_method(self):
    return self._payment_method

  def set_payment_method(self, payment_method):
    self._payment_method = payment_method


class CashPayment(Payment):
  """Class to represent a cash payment method."""
  def __init__(self):
    super().__init__("Cash")

class CreditCard(Payment):
  """Class to represent a credit card payment with additional attributes."""
  def __init__(self, card_number, expiry_date, cvv):
    super().__init__("Credit Card")
    self.__card_number = card_number
    self.__expiry_date = expiry_date
    self.__cvv = cvv

  def get_card_number(self):
    return self.__card_number

  def set_card_number(self, card_number):
    self.__card_number = card_number

  def get_expiry_date(self):
    return self.__expiry_date

  def set_expiry_date(self, expiry_date):
    self.__expiry_date = expiry_date

  def get_cvv(self):
    return self.__cvv

  def set_cvv(self, cvv):
    self.__cvv = cvv


class Purchase:
  """Class to represent a purchase operations and calculates total price with discounts and VAT."""
  def __init__(self, order, payment):
    self._order = order
    self._payment = payment

  def calculate_total_price(self):
    total = sum(book.get_price() for book in self._order._books)

    # Check if it is possible to apply loyalty discount
    if self._order._customer.get_loyalty_status():
      total *= 0.9  # 10% discount

    # Check if it is possible to apply bulk discount
    if len(self._order._books) >= 5:
      total *= 0.8  # 20% discount

    # Apply VAT
    total *= 1.08  # 8% VAT

    return total

  # Define a function to generate an invoice based on order details, total price AED, and payment method
  def generate_invoice(self):
    total_price = self.calculate_total_price()
    return f"Invoice:\nOrder Details: {self._order.get_order_details()}\nTotal Price: {total_price} AED\nPayment Method: {self._payment.get_payment_method()}"

from datetime import date

if __name__ == "__main__":
    # Create ebooks
    ebook1 = Ebook("The Little Prince", "Fatma Mohammed", "April 6, 1943", "Children's literature", 57.23)
    ebook2 = Ebook("Starting Out with Python", "Noora Ahmed", "March 6, 2017", "Programming", 460.15)

    # Create a catalog and add ebooks
    catalog = Catalog()
    catalog.add_book(ebook1)
    catalog.add_book(ebook2)

    # Create a customer account
    customer = CustomerAccount("Fatma", "Fatma1@gmail.com", "123456789", "123 Zayed University Street, Dubai", is_loyal_member=True)

    # Create a shopping cart and add ebooks
    cart = ShoppingCart()
    cart.add_ebook(ebook1, 2)
    cart.add_ebook(ebook2, 1)

    # Print objects for all the classes
    print("Ebook 1:", ebook1)
    print("Ebook 2:", ebook2)
    print("Catalog:", catalog.list_books())
    print("Customer:", customer)
    print("Shopping Cart:", cart.view_cart())
    print("Total Price in Cart:", cart.get_total_price())

    # Create an order
    order = Order(customer, [ebook1, ebook2])

    # Select payment method
    payment = CreditCard("1234567890123456", "11/08", "123")

    # Create a purchase
    purchase = Purchase(order, payment)

    # Print invoice
    print(purchase.generate_invoice())